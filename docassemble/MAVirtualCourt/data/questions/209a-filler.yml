comment: |
  Allows selecting ways to skip 209A interview content.
  
  TODO:
  1. Prefill as many fields as possible to make the form as
  fast to go through as possible. Skip nothing, so order is still clear.
  1. Try to be clear about where different sections/questions are coming from.
  
  Pages that are a pain to fill:
  1. Defendant info pages
  1. Lots of children
  1. Affidavit <- maybe tackle this one first with `continue button field`s
  1. Defendant prior cases info
  1. Children cases prior info
  1. Schools/daycares
  1. Children center/supervision, etc.
  
  Pages that still have multiple fields to fill:
  1. Names
  1. Addresses
  1. Contact info
  1. Children attorneys
  1. GALs
  
  Other info
  1. Children over 18
  1. Former addresses
  1. user_preferred_language
  1. Other info to keep private
  
  Note: `invalidate()` doesn't work as a way to pre-fill questions
  and then trigger them anyway.
---
objects:
  - to_fill: DAOrderedDict
  #- acknowledged_information_use: DAOrderedDict.using('acknowledged_information_use', gathered=True, auto_gather=False, there_are_any=True)
  - profile: DAOrderedDict
---
---
id: interview_order
mandatory: True
scan for variables: False
code: |
  set_always_pre_filled

  if to_fill.set_children:
    set_children
  if defined( 'to_fill.set_majors' ) and to_fill.set_majors:
    set_majors
  if defined( 'to_fill.set_daycares' ) and to_fill.set_daycares:
    set_daycares
  if defined( 'to_fill.set_visitation' ) and to_fill.set_visitation:
    set_visitation
  
  #if to_fill.set_plaintiff_keep_aways:
  #  set_plaintiff_keep_aways
  
  if to_fill.set_defendant_info:
    set_defendant_info
---
id: filler
question: |
  WIP: What do you want to pre-fill or skip?
subquestion: |
  Note: {You will have to activley support the properties you pick.}
  You can always edit pre-filled information as long as you see the
  screen that it's on.
fields:
  #- WIP Skip straight to the PDF: skip_to_pdf
  #  datatype: yesnowide
  #- WIP Skip intro (including accepting terms): to_fill.set_intro
  #  datatype: yesnowide
  #  default: True
  - "Pre-fill children": to_fill.set_children
    datatype: yesnowide
    default: True
  - Children: num_children
    show if: to_fill.set_children
    datatype: radio
    default: 2
    choices:
      - No children: 0
      - One child: 1
      - Two children: 2
      - Eight children: 8
  - Which of the above children are joint?: which_are_joint
    js show if: |
      parseInt(val("num_children")) > 0
    datatype: radio
    default: All
    choices:
      - All
      - None
      - Don't set: no_set
  - Custody or care children: num_custody_children
    show if: to_fill.set_children
    datatype: radio
    default: 0
    choices:
      - No children: 0
      - One child: 1
      - Two children: 2
      - Eight children: 8
  - How many of those are children of the defendant?: num_of_just_def
    js show if: |
      parseInt(val("num_custody_children")) > 0
    datatype: radio
    default: All
    choices:
      - All
      - None
      - Don't set: no_set
  - Pre-fill children's schools/daycares: to_fill.set_daycares
    datatype: yesnowide
    show if: to_fill.set_children
  # Worth it?
  #- Pre-fill just the date for incidents of abuse
  - note: How many schools/daycares?
    show if: to_fill.set_daycares
  - no label: num_daycares
    datatype: integer
    default: 2
    show if: to_fill.set_daycares
  - Pre-fill visitation orders: to_fill.set_visitation
    datatype: yesnowide
    show if: to_fill.set_children
  - Pre-fill visitation center info: set_visitation_center
    datatype: yesnowide
    default: True
    show if: to_fill.set_visitation
  #- Pre-fill two orders for defendant to keep away from plaintiff: to_fill.set_plaintiff_keep_aways
  #  datatype: yesnowide
  - note: |
        <hr/>
        **Set defendant properties**
  - note: |
      Details: Defendant has an alias, non-english speaker,
      weapon description, drug and mental health problems, is working,
      has a car.
  - Set those details: to_fill.set_defendant_info
    datatype: yesnowide
    default: True
under: |
  We hope this speed up testing because the tester won't have to
  type in as much text. Note: some data will **always** be filled
  in automatically when this tool is used, like the plaintiff's
  and defendant's names.
terms:
  "You will have to activley support the properties you pick.": |
    For exmaple, you can select to give the defendant an alias.
    Then, on the alias question page, you still have to mark
    that they have an alias. Once you do, you will see that the
    alias itself is already filled. Same thing with children. You
    need to select which kinds of children you do or don't have.
    
    It's the nature of this beast.
css: |
  <style>
    .question-filler input.labelauty + label {
      padding: .4rem;
      border: 1px solid darkgray;
      margin-bottom: .1rem;
    }
    .question-filler hr,
    .question-filler .form-group {
      margin: .4rem;
    }
    .question-filler hr {
      border-top-color: darkgray;
    }
    
    .question-filler p {
      margin-bottom: 0;
    }
    
    .question-filler .form-control {
      height: 2em;
      border-color: darkgray;
    }
  </style>
---
id: pre_fill_always_needed_values
sets: set_always_pre_filled
scan for variables: False
code: |
  # These always show up, so always pre-fill them

  acknowledged_information_use = DADict(
    'acknowledged_information_use', there_are_any = True,
    there_is_another = False, gathered = True
  )
  acknowledged_information_use[ 'I accept the terms of use.' ] = True
  
  #users[0].name.first = 'Pat'  # Screen trigger
  users[0].name.middle = 'Pip'
  users[0].name.last = 'Plaintiff'
  users[0].name.suffix = 'II'
  #users[0].birthdate = as_datetime('01/01/1990')  # Trigger
  
  # Address/Contact info for future? Trigger not yet known.
  # Street  # Trigger
  # Unit, city, state, zip
  users[0].mobile_number = '000-0000'
  users[0].phone_number = '111-1111'
  #users[0].email
  #users[0].other_contact_method
  
  #other_parties[0].name.first = 'Drew'  # Screen trigger
  other_parties[0].name.middle = 'Dar'
  other_parties[0].name.last = 'Def'
  other_parties[0].name.suffix = 'III'

  # other_parties[0].address.address  # Screen trigger
  other_parties[0].address.unit = '2B'
  other_parties[0].address_floor = '2'
  other_parties[0].address.city = 'Boston'
  other_parties[0].address.state = 'MA'
  other_parties[0].address.zip = '02108'
  #other_parties[0].address.geolocate()  # Triggers gathering
  other_parties[0].mobile_number = '222-2222'
  other_parties[0].phone_number = '333-3333'
  other_parties[0].email = 'def@example.com'
  other_parties[0].name_door_mailbox = 'Def'
  
  #other_parties[0].location_best  # Screen trigger
  other_parties[0].best_times_find = '2pm'
  other_parties[0].locations_other = 'Home'
  other_parties[0].location_information_other = 'Shop'

  #  # Screen trigger
  
  related_as_couple = DADict( 'related_as_couple' )
  related_as_couple[ 'engaged' ] = True
  related_as_couple[ 'dating' ] = True
  related_as_couple[ 'dated' ] = True
  related_as_couple[ 'past_engaged' ] = True
  
  # Worth it?
  #incidents_of_abuse.appendObject()
  #incidents_of_abuse[0].date = '01/01'
  
  log( 'set_always_pre_filled', 'console' )  
  set_always_pre_filled = True
---
comment: |
  '''
  # To use for court map when it arrives. Need to find shorter address.
  #users[0].address.address = '1 Tremont St'
  users[0].address.unit = '1'
  users[0].address.city = 'Boston'
  users[0].address.state = 'MA'
  users[0].address.zip = '02108'
  users[0].address.geolocate()
  
  #other_parties[0].address.address = '2 Tremont St'
  other_parties[0].address.unit = '2'
  other_parties[0].address.city = 'Boston'
  other_parties[0].address.state = 'MA'
  other_parties[0].address.zip = '02108'
  other_parties[0].address.geolocate()
  '''
---
id: children_names_and_ages
sets: set_children
scan for variables: False
code: |

  # Non-custody children of the right number
  int_children = int( num_children )
  children.target_number = int_children

  child_i = 0
  for child_i in range( int_children ):
    child_num = str( child_i + 1 )
    #children[ child_i ].name.first = 'Child' + child_num
    children[ child_i ].name.middle = 'Child of'
    children[ child_i ].name.last = 'Plaintiff'
    children[ child_i ].name.suffix = 'Jr'
    date_str = '0' + child_num + '/0' + child_num + '/201' + child_num
    children[ child_i ].birthdate = as_datetime( date_str )
    if which_are_joint == 'All': children[ child_i ].defendant_is_parent = True
    if which_are_joint == 'None': children[ child_i ].defendant_is_parent = False

  # Children under plaintiff's care or custody
  int_custody_children = int( num_custody_children )
  children_cares_for.target_number = int_custody_children

  for c_child_i in range( int_custody_children ):
    child_num = str( c_child_i + 1 )
    #children_cares_for[ c_child_i ].name.first = 'Cody' + child_num
    children_cares_for[ c_child_i ].name.middle = 'Child of'
    children_cares_for[ c_child_i ].name.last = 'Custody'
    children_cares_for[ c_child_i ].name.suffix = 'Jr'
    date_str = '1' + child_num + '/0' + child_num + '/201' + child_num
    children_cares_for[ c_child_i ].birthdate = as_datetime( date_str )
    log( num_of_just_def, 'console' )
    if num_of_just_def == 'All':
      children_cares_for[ c_child_i ].defendant_is_parent = True
    if num_of_just_def == 'None':
      children_cares_for[ c_child_i ].defendant_is_parent = False

  log( 'set_children', 'console' )
  set_children = True
---
# Wants custody of - can set requests_custody
comment: |
  - I need custody of the ${children.as_noun()} I have in common with ${other_parties.familiar()}.: requests_custody
    datatype: yesnoradio
  - Which children do you need custody of?: wants_custody_of  # Trigger
    show if: requests_custody
    datatype: object_checkboxes
    choices: |
      children_of_both
    object labeler: |
      lambda y: y.familiar()
    none of the above: False 
    minlength: 1
  validation code: |
    if not requests_custody:
      wants_custody_of = PeopleList(gathered=True, auto_gather=False)
---
# Wants no contact for - can set request_no_contact
comment: |
  - I need the judge to order 'No contact.': request_no_contact
    datatype: yesnoradio
  - Which children?: wants_no_contact_for  # Trigger
    datatype: object_checkboxes
    show if: request_no_contact
    choices: |
      children + children_cares_for
    object labeler: |
      lambda y: y.familiar()
    minlength: 1      
    none of the above: False
  validation code: |
    if not request_no_contact:
      wants_no_contact_for = PeopleList(gathered=True,auto_gather=False)
---
id: daycares
sets: set_daycares
scan for variables: False
code: |
  
  daycares_int = int( num_daycares )
  for daycare_i in range( daycares_int ):
    daycare_num = str( daycare_i + 1 )
    daycare = schools_to_stay_away_from.appendObject()
    #daycare.name.text  # Triggers question
    daycare.address.address = "School " + daycare_num
    daycare.address.unit = daycare_num
    daycare.address.city = "Boston"
    daycare.address.state = 'MA'
    daycare.address.zip = daycare_num * 5

  log( 'set_daycares', 'console' )
  set_daycares = True
---
id: visitation
sets: set_visitation
scan for variables: False
code: |
  #wants_center  # Triggers question
  if set_visitation_center:
    visitation_center_name = 'Visits R Us'
    pays_for_center = 'other'
    other_pays_for_center = 'My Friend'

  wants_supervision = True
  visitation_supervisor_name_full = 'Val'
  supervision_time = '5pm'
  supervision_payer = 'other'
  other_supervision_payer = 'My Pal'

  wants_pickup = True
  who_picks_up = 'Picker upper'

  wants_other_order = True
  other_order = 'Order this.'

  log( 'set_visitation', 'console' )
  set_visitation = True
---
# Children over 18 needing child support names
# Low priority
---
id: set_plaintiff_keep_aways
sets: set_plaintiff_keep_aways
scan for variables: False
code: |
  #order_defendant_remain_away_plaintiff_residence_yes  # Trigger
  #order_defendant_no_contact_unless_court_authorized_yes = True
  #order_defendant_remain_away_plaintiff_workplace_yes = True
  #order_defendant_remain_away_plaintiff_school_yes = True
  
  # Is impoundment part of keep aways mentally for testers?
  #order_impound_plaintiff_address_residential_yes  # Trigger
  
  set_plaintiff_keep_aways = True
---
id: defendant_info
sets: set_defendant_info
scan for variables: False
code: |
  # We only have one profile now, but we can hope
  set_defendant_info_profile_1 = True

  if set_defendant_info_profile_1:
    defendant_info_profile_1

  set_defendant_info = True
---
id: defendant_profile_1
sets: defendant_info_profile_1
scan for variables: False
code: |
  #defendant_has_alias  # Screen trigger
  other_parties[0].name_other = 'Defe'
  other_parties[0].gender = "female"
  
  #other_parties[0].understands_english  # Screen trigger
  other_parties[0].language_other = 'Farsi'
  parents = DAList(
    'parents', there_are_any = True,
    there_is_another = False, gathered = True
  )
  parents[0] = 'Def Mom'
  parents[1] = 'Def Dad'
  other_parties[0].birthplace = 'Denver, CO'
  other_parties[0].social_security_number = '2222'  # Not populating?
  
  #other_parties[0].race  # Screen trigger
  other_parties[0].eye_color = 'Amber'
  other_parties[0].eye_other = 'Round'
  other_parties[0].hair_color = 'other'
  other_parties[0].hair_color_other = 'Pink'
  other_parties[0].hair_other_style = 'Long'
  
  #other_parties[0].height  # Screen trigger
  other_parties[0].birthdate = as_datetime('02/22/2000')
  other_parties[0].weight = '222 lb'
  other_parties[0].physical_build = DADict(
    'other_parties[0].physical_build', there_are_any = True,
    there_is_another = False, gathered = True
  )
  other_parties[0].physical_build[ 'Small' ] = True
  other_parties[0].physical_other = DADict(
    'other_parties[0].physical_other', there_are_any = True,
    there_is_another = False, gathered = True
  )
  other_parties[0].physical_other[ 'Full beard' ] = True
  other_parties[0].physical_other_details = 'Limp'

  #defendant_has_guns['gun']  # Screen trigger
  defendant_has_guns = DADict(
    'defendant_has_guns', there_are_any = True,
    there_is_another = False, gathered = True
  )
  defendant_has_guns[ 'ammo' ] = True
  defendant_has_guns[ 'FID' ] = True
  defendant_has_guns[ 'license' ] = True
  defendant_weapons_description = 'Big'
  
  #other_parties[0].police_violence_yes  # Screen trigger
  other_parties[0].drug_alcohol_yes = True
  other_parties[0].drug_alcohol_abuse = 'Lots'
  other_parties[0].psychiatric_emotional_problems_yes = True
  other_parties[0].psychiatric_emotional_problems = 'Sad'
  
  #defendant_not_employed  # Screen trigger
  other_parties[0].employer = 'Boss'
  other_parties[0].work_address = 'Deli'
  other_parties[0].work_phone = '444-4444'
  other_parties[0].work_title = 'Worker'
  other_parties[0].work_department = 'Staff'
  other_parties[0].work_hours = '2-3'
  
  #other_parties[0].does_not_have_car  # Screen trigger
  other_parties[0].vehicle_color = 'Black'
  other_parties[0].vehicle_make = 'A make'
  other_parties[0].vehicle_model = 'A model'
  other_parties[0].vehicle_year = '2020'
  other_parties[0].vehicle_license_plate = '22 2222'

  defendant_info_profile_1 = True
---
include:
  - 209a_package.yml
